//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Character/characterInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""characterInputActions"",
    ""maps"": [
        {
            ""name"": ""CharacterInputController"",
            ""id"": ""a0333d3c-282a-439a-890c-7406634d8dad"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c36bdaff-1ae7-4f73-8e45-7ecee72a0a60"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ViewRotate"",
                    ""type"": ""Value"",
                    ""id"": ""5490e91c-ac1b-4b2e-a607-8e6f550abdd2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0c253a06-f29c-4731-977a-68437f2dd98c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""a43490a8-50ba-4424-9a7c-c4bcc05c3e33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DropItem"",
                    ""type"": ""Button"",
                    ""id"": ""39d6033b-e0c2-49a1-9c30-1699f1a02f9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shot"",
                    ""type"": ""Button"",
                    ""id"": ""9075fb7d-9717-41c0-ae3a-8a0cb2a5a60d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""0f159a3e-3c55-47a7-8f2d-ed99cd7a5b01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseInventory"",
                    ""type"": ""Value"",
                    ""id"": ""3d16126f-a4fe-48f6-8ead-f388e1c18971"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d5adcfb-48f5-4e63-9770-4617dbfc4aee"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""ViewRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0d72aa87-5720-4bb9-8849-025dc3085b72"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9c9038c4-01fc-4dbc-b3b0-4348b2a97139"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""03e323d9-35e2-486b-a99b-91dbc913cee6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""483d32f4-7843-4712-be60-ded0092949ee"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""65e748a6-9092-4b32-9bcb-ee9eb3697f99"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a77a59fa-90bc-4af5-a461-84feff319388"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53758059-28ff-4403-b9ea-aad0760ecb3c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03c0212c-44ab-46f6-a5ca-4e9afd2e1b4f"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1a12af6-ccae-430d-ab46-a097bbb25101"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e27648e2-fb06-4e32-a6a7-9a645e3201f5"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af9b4064-cb97-42ec-8d5f-3c26b508b4cb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LadderInput"",
            ""id"": ""a763137a-ed5f-4e1d-96a4-d9b4b8f68237"",
            ""actions"": [
                {
                    ""name"": ""Slide"",
                    ""type"": ""Value"",
                    ""id"": ""db19350a-d545-415f-b37d-1f9fc0771108"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fall"",
                    ""type"": ""Button"",
                    ""id"": ""360bae31-15b5-4a1e-85e4-ed7479921503"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7061ec66-1741-4e54-85d5-8d086c2d8f9a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4091d158-02d8-4e41-b7e7-e3fffea1314a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""76d0cc08-17ba-4d8f-a6df-678305ee9604"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""380e412c-0477-45f2-a4fe-09dc106ddc6a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""11288b7b-c753-42cb-890d-cd99f8c4098e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""047fd437-98f4-4a57-92ac-7a3040e859e6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterInputController
        m_CharacterInputController = asset.FindActionMap("CharacterInputController", throwIfNotFound: true);
        m_CharacterInputController_Move = m_CharacterInputController.FindAction("Move", throwIfNotFound: true);
        m_CharacterInputController_ViewRotate = m_CharacterInputController.FindAction("ViewRotate", throwIfNotFound: true);
        m_CharacterInputController_Jump = m_CharacterInputController.FindAction("Jump", throwIfNotFound: true);
        m_CharacterInputController_Use = m_CharacterInputController.FindAction("Use", throwIfNotFound: true);
        m_CharacterInputController_DropItem = m_CharacterInputController.FindAction("DropItem", throwIfNotFound: true);
        m_CharacterInputController_Shot = m_CharacterInputController.FindAction("Shot", throwIfNotFound: true);
        m_CharacterInputController_Inventory = m_CharacterInputController.FindAction("Inventory", throwIfNotFound: true);
        m_CharacterInputController_MouseInventory = m_CharacterInputController.FindAction("MouseInventory", throwIfNotFound: true);
        // LadderInput
        m_LadderInput = asset.FindActionMap("LadderInput", throwIfNotFound: true);
        m_LadderInput_Slide = m_LadderInput.FindAction("Slide", throwIfNotFound: true);
        m_LadderInput_Fall = m_LadderInput.FindAction("Fall", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterInputController
    private readonly InputActionMap m_CharacterInputController;
    private ICharacterInputControllerActions m_CharacterInputControllerActionsCallbackInterface;
    private readonly InputAction m_CharacterInputController_Move;
    private readonly InputAction m_CharacterInputController_ViewRotate;
    private readonly InputAction m_CharacterInputController_Jump;
    private readonly InputAction m_CharacterInputController_Use;
    private readonly InputAction m_CharacterInputController_DropItem;
    private readonly InputAction m_CharacterInputController_Shot;
    private readonly InputAction m_CharacterInputController_Inventory;
    private readonly InputAction m_CharacterInputController_MouseInventory;
    public struct CharacterInputControllerActions
    {
        private @CharacterInputActions m_Wrapper;
        public CharacterInputControllerActions(@CharacterInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterInputController_Move;
        public InputAction @ViewRotate => m_Wrapper.m_CharacterInputController_ViewRotate;
        public InputAction @Jump => m_Wrapper.m_CharacterInputController_Jump;
        public InputAction @Use => m_Wrapper.m_CharacterInputController_Use;
        public InputAction @DropItem => m_Wrapper.m_CharacterInputController_DropItem;
        public InputAction @Shot => m_Wrapper.m_CharacterInputController_Shot;
        public InputAction @Inventory => m_Wrapper.m_CharacterInputController_Inventory;
        public InputAction @MouseInventory => m_Wrapper.m_CharacterInputController_MouseInventory;
        public InputActionMap Get() { return m_Wrapper.m_CharacterInputController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterInputControllerActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterInputControllerActions instance)
        {
            if (m_Wrapper.m_CharacterInputControllerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnMove;
                @ViewRotate.started -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnViewRotate;
                @ViewRotate.performed -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnViewRotate;
                @ViewRotate.canceled -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnViewRotate;
                @Jump.started -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnJump;
                @Use.started -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnUse;
                @Use.performed -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnUse;
                @Use.canceled -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnUse;
                @DropItem.started -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnDropItem;
                @DropItem.performed -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnDropItem;
                @DropItem.canceled -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnDropItem;
                @Shot.started -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnShot;
                @Shot.performed -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnShot;
                @Shot.canceled -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnShot;
                @Inventory.started -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnInventory;
                @MouseInventory.started -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnMouseInventory;
                @MouseInventory.performed -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnMouseInventory;
                @MouseInventory.canceled -= m_Wrapper.m_CharacterInputControllerActionsCallbackInterface.OnMouseInventory;
            }
            m_Wrapper.m_CharacterInputControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @ViewRotate.started += instance.OnViewRotate;
                @ViewRotate.performed += instance.OnViewRotate;
                @ViewRotate.canceled += instance.OnViewRotate;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
                @DropItem.started += instance.OnDropItem;
                @DropItem.performed += instance.OnDropItem;
                @DropItem.canceled += instance.OnDropItem;
                @Shot.started += instance.OnShot;
                @Shot.performed += instance.OnShot;
                @Shot.canceled += instance.OnShot;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @MouseInventory.started += instance.OnMouseInventory;
                @MouseInventory.performed += instance.OnMouseInventory;
                @MouseInventory.canceled += instance.OnMouseInventory;
            }
        }
    }
    public CharacterInputControllerActions @CharacterInputController => new CharacterInputControllerActions(this);

    // LadderInput
    private readonly InputActionMap m_LadderInput;
    private ILadderInputActions m_LadderInputActionsCallbackInterface;
    private readonly InputAction m_LadderInput_Slide;
    private readonly InputAction m_LadderInput_Fall;
    public struct LadderInputActions
    {
        private @CharacterInputActions m_Wrapper;
        public LadderInputActions(@CharacterInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Slide => m_Wrapper.m_LadderInput_Slide;
        public InputAction @Fall => m_Wrapper.m_LadderInput_Fall;
        public InputActionMap Get() { return m_Wrapper.m_LadderInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LadderInputActions set) { return set.Get(); }
        public void SetCallbacks(ILadderInputActions instance)
        {
            if (m_Wrapper.m_LadderInputActionsCallbackInterface != null)
            {
                @Slide.started -= m_Wrapper.m_LadderInputActionsCallbackInterface.OnSlide;
                @Slide.performed -= m_Wrapper.m_LadderInputActionsCallbackInterface.OnSlide;
                @Slide.canceled -= m_Wrapper.m_LadderInputActionsCallbackInterface.OnSlide;
                @Fall.started -= m_Wrapper.m_LadderInputActionsCallbackInterface.OnFall;
                @Fall.performed -= m_Wrapper.m_LadderInputActionsCallbackInterface.OnFall;
                @Fall.canceled -= m_Wrapper.m_LadderInputActionsCallbackInterface.OnFall;
            }
            m_Wrapper.m_LadderInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Slide.started += instance.OnSlide;
                @Slide.performed += instance.OnSlide;
                @Slide.canceled += instance.OnSlide;
                @Fall.started += instance.OnFall;
                @Fall.performed += instance.OnFall;
                @Fall.canceled += instance.OnFall;
            }
        }
    }
    public LadderInputActions @LadderInput => new LadderInputActions(this);
    public interface ICharacterInputControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnViewRotate(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnDropItem(InputAction.CallbackContext context);
        void OnShot(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnMouseInventory(InputAction.CallbackContext context);
    }
    public interface ILadderInputActions
    {
        void OnSlide(InputAction.CallbackContext context);
        void OnFall(InputAction.CallbackContext context);
    }
}
