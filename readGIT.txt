gitPlan deistviy


//Начало рабочего дня (безопастно скачиваешь и добавляешь к себе все изменения из удалённого репозитория)

1) git checkout mod (если нет ветки - пиши git branch mod)
2) git pull
//возможно при наличии локальных изменений понадобиться сделать commit, далее сделать pull, решить конфликты в файлах
3) проверяем что всё работает
4) git checkout master
5) git merge mod
6) после этого иди в ветку dev (git checkout dev), чтобы не муссорить в мастер.

//Можно начать работать!

//При создании новой фишки (в отдельной ветке работаешь, можешь спокойно откатываться при проблемах. Потом merge с главной веткой и push master ветки в удалённый репозиторий.)
// Простым языком: работаем в ветке dev, чтобы все изменения которые мы вносим были в ветке dev(если сделаешь checkout в другую ветку, то файлы вернутся к состоянию ветки на которую ты перешёл),
ветка master(все файлы в том числе) останутся неизменёнными.
1) ПКМ + GetBushHere
1) git checkout dev //выбераешь ветку dev
//разрабатываешь фишку и тестишь её!!!!
1.1) git status //показывает в каких файлах есть изменения относительно последнего commit
2) git add . //добавляет все отслеживаемые(ред) файлы в commit
3) git commit -m 'твой коммент' 
//только когда закончил работу и всё проверил идёшь дальше
4) git checkout master // Переместится на главную ветку
5) git merge dev //выбераешь ветку dev
6) git push //push master ветки
всё готово

//Если появилась необходимость откатиться на предыдущий каммит в текущей ветке.
1) git log //находим наш commit и копируем его ID
2) git revert ID-коммита который нам интересен
//далее нам предложат изменить коммент, проще ничего не менять
//всё готово, вы молодцы!!

//force override local files
git fetch --all
git reset --hard origin/master
git pull origin master
//

при конфликте интересов
//
git commit -m 'твой коммент' //сохранит твои локальные изменения
git pull // закинет к тебе новые изменения и при конфликте в файлах ты увидишь новую и старую версию кода
// разреши конфликты в файлах (удали что не нужно)
git commit -m 'твой коммент'
git push // push изменений